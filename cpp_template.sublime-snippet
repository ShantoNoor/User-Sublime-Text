<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

// #define _pdbs
#ifdef _pdbs
  #include <ext/pb_ds/assoc_container.hpp>
  #include <ext/pb_ds/tree_policy.hpp>
  using namespace __gnu_pbds;
  typedef tree< pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
  // lower_bound, upper_bound
  // find_by_order, order_of_key
  // less_equal<int>
#endif

#define ff first
#define ss second
#define endl "\n"
#define mp make_pair
#define pb push_back
#define ppb pop_back
#define ppf pop_front
#define pf push_front
#define ll long long
#define ld long double
#define ull unsigned ll
#define sq(x) ((x)*(x))
#define eb emplace_back
#define ef emplace_front
#define vec(x) vector<x>
#define pr(x, y) pair<x, y>
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (unsigned int)x.size()
#define mem(a) memset(a, 0, sizeof(a))
#define memn(a) memset(a , -1 ,sizeof(a))
#define zerobits(x) __builtin_ctzll(x)
#define onebits(x) __builtin_popcountll(x)
#define sp(x) fixed<<setprecision(x)
#define pqb priority_queue<int>
#define pqs priority_queue<int, vec(int), greater<int>>
#define rep(i,b,e) for(__typeof(e) i = (b); i != (e + 1) - 2 * ((b) > (e)); i += 1 - 2 * ((b) > (e)))
#define FIO \
  ios_base::sync_with_stdio(false); \
  cin.tie(NULL); 
  // cout.tie(NULL);

#ifdef DEBUG
  clock_t tStart = clock();
  #include<cpprint.h>
  #define deb(x) \
    cerr << #x << " = "; \
    cpprint::print(x);
  #define IOD \
    freopen("input.txt", "r", stdin); \
    freopen("output.txt", "w", stdout); \
    freopen("debug.txt", "w", stderr); 
  #define TIME fprintf(stderr, "\nRuntime: %.10fs\n", (double) (clock() - tStart) / CLOCKS_PER_SEC);
#else
  #define deb(x)
  #define IOD
  #define TIME
#endif

int dx[8] = {0, -1, 0, 1, -1, -1, 1, 1};
int dy[8] = { -1, 0, 1, 0, -1, 1, 1, -1};

const int N      = (int)2e5 + 5;
const int maxN   = (int)1e6 + 6;
const ll  Mod    = (ll)1e9 + 7;
const int inf    = (int)2e9;
const ll  Inf    = (ll)1e18;
const int mod    = (int)1e9 + 7;
const double EPS = (double)1e-9;
const double PI  = (double)acos(-1.0);
 
inline int add(int a, int b, int mod) { a += b ; return a >= mod ? a - mod : a; }
inline int sub(int a, int b, int mod) { a -= b ; return a < 0 ? a + mod : a; }
inline int mul(int a, int b, int mod) { return (ll)a * b % mod; }

void solve() {
  /*Code_Here*/
  cout << "Hello World" << endl;
}

int main() {
  FIO IOD

    // int tc; cin >> tc;
    // while(tc--) 
  {
    solve();  
  }

  TIME
  return 0;
}


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
